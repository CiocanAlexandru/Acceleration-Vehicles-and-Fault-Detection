Linkuri Utile :
Hyper parameters SVM https://www.geeksforgeeks.org/svm-hyperparameter-tuning-using-gridsearchcv-ml/


//Implementare startegie one to rest pentru SVM 
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_multilabel_classification
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.svm import SVC
from sklearn.multiclass import OneVsRestClassifier
from sklearn.metrics import accuracy_score, classification_report
import seaborn as sns
from sklearn.metrics import multilabel_confusion_matrix
import matplotlib.pyplot as plt

# Generate synthetic multi-label dataset
X, y = make_multilabel_classification(n_samples=1000, n_features=20, n_classes=3, n_labels=2, random_state=42)
print(f"X content:{X[:5]}")
print(f"Y content:{y[:5]}")
# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the SVM model (wrapped in OneVsRestClassifier)
svm_model = OneVsRestClassifier(SVC())

# Define the hyperparameters and their possible values for tuning
param_grid = {
    'estimator__C': [0.1, 1, 10, 100],         # Regularization parameter
    'estimator__kernel': ['linear', 'rbf'],   # Kernel type
    'estimator__gamma': [1, 0.1, 0.01, 0.001, 0.0001] # Kernel coefficient for 'rbf' kernel
}

# Create GridSearchCV with the SVM model and hyperparameter grid
grid_search = GridSearchCV(svm_model, param_grid, cv=5, scoring='accuracy', n_jobs=-1)

# Fit the grid search to the data
grid_search.fit(X_train, y_train)

# Get the best hyperparameters from the grid search
best_params = grid_search.best_params_
print("Best Hyperparameters:", best_params)

# Get the best SVM model with the tuned hyperparameters
best_svm_model = grid_search.best_estimator_

# Make predictions on the test set
y_pred = best_svm_model.predict(X_test)

# Calculate accuracy on the test set
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy on Test Set:", accuracy)

# Print classification report
print("Classification Report:\n", classification_report(y_test, y_pred))

conf_matrices = multilabel_confusion_matrix(y_test, y_pred)

# Number of classes
num_classes = y.shape[1]

# Plot confusion matrix heatmaps
plt.figure(figsize=(15, 5))

for i in range(num_classes):
    plt.subplot(1, num_classes, i + 1)
    sns.heatmap(conf_matrices[i], annot=True, fmt="d", cmap="Blues", xticklabels=['0', '1'], yticklabels=['0', '1'])
    plt.title(f'Confusion Matrix Class {i + 1}')

plt.show()
print(f"Your best parameter for svm are:\nbest_C={best_params['estimator__C']}\nbest_kernel={best_params['estimator__kernel']}\nbest_gamma={best_params['estimator__gamma']}")

//Implementare SVM fara one to rest 


